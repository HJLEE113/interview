1.ArrayList 와 LinkedList 의 장단점은?



ArrayList 는 배열을 한번 복사하는데도 시간걸림, 지우는것도 시간 걸림 - 배열의 단점 그대로.(단점)

검색(=참조)은 빠르다. 다이렉트로 찾아감(장점)



LinkedList 는 검색은 느리다.(단점)

저장공간은 객체를 하나씩 늘리기때문에 과정이 간단.(장점)





2.Scanner 클래스로 -1이 입력될 때까지 양의 정수를 입력받아 저장하고 검색하여 가장 큰 수를 출력하는 프로그램을 작성하라 

정수(-1이 입력될 때까지)>> 10 6 22 6 88 77 -1 

가장 큰 수는 88


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ListIterator;
import java.util.Scanner;

public class BigNum {

	public static void main(String[] args) {
		System.out.println("정수를 입력하세요");
		Scanner sc = new Scanner(System.in);
		List<Integer> list = Arrays.asList(sc.nextInt());
		list = new ArrayList<>(list);
		ListIterator<Integer> litr = list.listIterator();

		while (true) {
			int num = sc.nextInt();
			list.add(num);
			if (list.get(list.size() - 1) == -1) {
				break;

			}
		
		}
		Collections.sort(list);
		System.out.println(list.get(list.size() - 1));

	}

}


3.로또 프로그램을 작성하시오.(Set 으로)

public class lottoMain {

	public static void main(String[] args) {
		
		Set<Integer> set = new HashSet<Integer>();
		
		while(set.size() < 6) {
		set.add((int)((Math.random()*45)+1));
		}
		
	System.out.print(set);	
	}

}

4.Set에 대하여 설명하시오.

set = 함수

-저장 순서가 유지되지 않는다.

-데이터의 중복 저장을 허용하지 않는다.


5.도시 이름, 위도, 경도 정보를 가진 Location 클래스를 작성하고, 도시 이름을 '키'로 하는 HashMap<String, Location> 컬렉션을 만들고, 사용자로부터 입력 받아 4개의 도시를 저장하라. 그리고 도시 이름으로 검색하는 프로그램을 작성하라. 

도시, 경도, 위도를 입력하세요. 

>> 서울, 37, 126 

>> LA, 34, -118 

>> 파리, 2, 48 

>> 시드니, 151, -33 

---------------------------------- 

서울 37 126 

LA 34 -118 

파리 2 48 

시드니 151 -33 

---------------------------------- 

도시 이름 >> 피리 

피리는 없습니다. 

도시 이름 >> 파리 

파리 2 48 

도시 이름 >> 그만 




6.Scanner 클래스를 사용하여 6개 학점('A', 'B', 'C', 'D', 'F')을 문자로 입력받아 ArrayList에 저장하고, ArrayList를 검색하여 학점을 점수(A=4.0, B=3.0, C=2.0, D=1.0, F=0)로 변환하여 평균을 출력하는 프로그램을 작성하라. 

6개의 학점을 빈 칸으로 분리 입력(A/B/C/D/F) >> A C A B F D 

2.3333333333333335







7.출력이 아래와 같이 나오도록 하시오(필수).

        HashSet<Num> set = new HashSet<>();
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());

        for(Num n : set)
            System.out.print(n.toString() + '\t');

        System.out.println();

====출력
인스턴스 수: 2
7799	9955
package java_1222;

import java.util.HashSet;

public class HashMain {

	public static void main(String[] args) {
		HashSet<Num> set = new HashSet<>();
		set.add(new Num(7799));
		set.add(new Num(9955));
		set.add(new Num(7799));

		System.out.println("인스턴스 수: " + set.size());

		for (Num n : set)
			System.out.print(n.toString() + '\t');

		System.out.println();

	}
}

class Num{
	private int num;
	
	public Num(int n){
		num = n;
	}
	
	@Override
	public String toString() {
		return String.valueOf(num);
	}
	
	@Override
	public int hashCode() {
		return num%2;
	}
	
	@Override
	public boolean equals(Object obj) {
		if(num == ((Num)obj).num)
			return true;
		else
			return false;
	}
}




8.Set 호출되는 원리와 순서를 설명하시오?








9.아래와 같이 출력되도록 하시오.

        HashSet<Person> hSet = new HashSet<Person>();
        hSet.add(new Person("LEE", 10));
        hSet.add(new Person("LEE", 10));
       	hSet.add(new Person("PARK", 35));
        hSet.add(new Person("PARK", 35));

        System.out.println("저장된 데이터 수: " + hSet.size());
        System.out.println(hSet);
============
저장된 데이터 수: 2
[LEE(10세), PARK(35세)]
package java_1222;

import java.util.HashSet;

public class HashMain {

	public static void main(String[] args) {
        HashSet<Person> hSet = new HashSet<Person>();
        hSet.add(new Person("LEE", 10));
        hSet.add(new Person("LEE", 10));
       	hSet.add(new Person("PARK", 35));
        hSet.add(new Person("PARK", 35));

        System.out.println("저장된 데이터 수: " + hSet.size());
        System.out.println(hSet);
	}
}

class Person{
	private int age;
	private String name;
	
	public Person(String n, int a){
		name = n;
		age = a;
	}
	
	@Override
	public String toString() {
		return String.valueOf(name+"("+age+"세)");
	}
	
	@Override
	public int hashCode() {
		return age%2;
	}
	
	@Override
	public boolean equals(Object obj) {
		if(age == ((Person)obj).age)
			return true;
		else
			return false;
	}
}//저장된 데이터 수: 2
//[LEE(10세), PARK(35세)]
ㅏ
