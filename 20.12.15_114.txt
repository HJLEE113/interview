1.Maker 인터페이스에 대하여 설명하시오.

인터페이스만 있고 메소드가 없다.


2.추상클래스에 대하여 설명하시오.

클래스 안에 추상메소드가 한개라도있으면 클래스앞에 abstract가 붙어야한다.
객체생성 불가능하고 참조변수선언은 가능하다. (인터페이스랑 동일)


3.추상클래스와 인터페이스의 차이는?

인터페이스 : 
abstract가 붙는다. (=추상 메소드가 온다.)

(abstract 는? = 자손이 구현하라.)

몸체가 없어서 객체생성이 불가하다. (Printable p = new Printable(); )

but, 함수 선언은 가능하다. Printable p;


추상클래스 :
클래스앞에 abstract붙음 = 추상클래스

→abstract = 자손이 구현한다.

→추상클래스도 자손이 구현한다.

 
4.에러와 예외의 차이는?

에러는 문법적 오류(컴파일시 오류)

예외(exception)는 개발자가 못잡는 오류이다. jvm에서 에러가 뜨는데 이는 코딩상의 에러가 아닌 시스템상의 오류이다.(ex. 메모리가 꽉찼을때, 하드웨어의 오류일때 등)




5.unchecked 와 checked 예외의 차이는?

예외(exception)에는 uchecked Exception 과 checked Exception 두가지로 나뉜다.

Checked Exception이 발생할 가능성이 있는 메소드라면 반드시 로직을 try/catch로 감싸거나 throw로 던져서 처리해야 한다.  반면에 Unchecked Exception은 명시적인 예외처리를 하지 않아도 된다.






6.예외처리 UML를 그리시오.






7.사칙연산 계산기를 아래의 조건으로 짜시오. 
-interface 를 활용할것 
-예외처리 메커니즘을 적용할것.



package java_1215_pre;

import java.util.Scanner;

//사칙연산 계산기를 아래의 조건으로 짜시오.
//-interface 를 활용할것
//-예외처리 메커니즘을 적용할것.
interface ICalcul2 {
	int add(int x, int y);

	int sub(int x, int y);

	int mul(int x, int y);

	int div(int x, int y);
}

class Calculnum implements ICalcul2 {

	public void cal(int x, int y) {

	}

	@Override
	public int add(int x, int y) {

		return x + y;
	}

	@Override
	public int sub(int x, int y) {

		return x - y;
	}

	@Override
	public int mul(int x, int y) {

		return x * y;
	}

	@Override
	public int div(int x, int y) {

		return x / y;
	}

}

public class ICalcul {
	public static void main(String[] args) {
		System.out.println("두 정수를 입력하시오.");
		Calculnum cal = new Calculnum();
		Scanner sc = new Scanner(System.in);
		int x = sc.nextInt();
		int y = sc.nextInt();

		try {
			System.out.println(x + "+" + y + "=" + cal.add(x, y));
			System.out.println(x + "-" + y + "=" + cal.sub(x, y));
			System.out.println(x + "-" + y + "=" + cal.mul(x, y));
			System.out.println(x + "-" + y + "=" + cal.div(x, y));

		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("계산 끝");
	}
}





8.다음 Stack 인터페이스를 상속받아 실수를 저장하는 StringStack 클래스를 구현하라.(구현할수 있도록 할것) [외우기]

interface Stack { 
   int length(); // 현재 스택에 저장된 개수 리턴 
   int capacity(); // 스택의 전체 저장 가능한 개수 리턴 
   String pop(); // 스택의 톱(top)에 실수 저장 
   boolean push(String val); // 스택의 톱(top)에 저장된 실수 리턴 
} 
그리고 다음 실행 사례와 같이 작동하도록 StackApp 클래스에 main() 메소드를 작성하라. 

총 스택 저장 공간의 크기 입력 >> 3 
문자열 입력 >> hello 
문자열 입력 >> sunny 
문자열 입력 >> smile 
문자열 입력 >> happy 
스택이 꽉 차서 푸시 불가! 
문자열 입력 >> 그만 F
스택에 저장된 모든 문자열 팝 : smile sunny hello 





9. 
철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다 

- int 타입의 a, b 필드: 2개의 피연산자 
- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다. 
- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다. 
곰곰 생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 새로운 추상 클래스 Calc를 작성하고 Calc를 상속받아 만들면 되겠다고 생각했다. 그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후, Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 setValue() 와 calculate()를 호출하여 그 결과 값을 화면에 출력하면 된다고 생각하였다. 철수처럼 프로그램을 작성하라. 

두 정수와 연산자를 입력하시오 >> 5 7 + 
-

package java_1215_pre;

import java.util.Scanner;

//사칙연산 계산기를 아래의 조건으로 짜시오.
//-interface 를 활용할것
//-예외처리 메커니즘을 적용할것.
interface Calc {
	int add(int a, int b);

	int sub(int a, int b);

	int mul(int a, int b);

	int div(int a, int b);
}

class Calclass implements Calc {
	char oper = 0;
	int num1 = 0, num2 = 0;
	int result = 0;

	void setValue(int i, int j) {// 피연산자 값을 객체 내에 저장한다.
//????
	}

	public Calclass(int i, int j, char oper) {// 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.

		switch (oper) {
		case '+': {
			result = i + j;
			break;
		}
		case '-': {
			result = i - j;
			break;
		}
		case '*': {
			result = i * j;
			break;
		}
		case '/': {
			result = i / j;
			break;
		}
		}
		System.out.println(result);
	}

	public void cal(int x, int y) {

	}

	@Override
	public int add(int i, int j) {

		return i + j;
	}

	@Override
	public int sub(int i, int j) {

		return i - j;
	}

	@Override
	public int mul(int i, int j) {

		return i * j;
	}

	@Override
	public int div(int i, int j) {

		return i / j;
	}

}

public class Chulsoo {
	public static void main(String[] args) {

		System.out.println("두 정수와 연산자를 입력하시오.");
		Scanner sc = new Scanner(System.in);
		int i = sc.nextInt();
		int j = sc.nextInt();
		char oper = sc.next().charAt(0);

		Calclass calc = new Calclass(i, j, oper);

	}
}

12




13.연습문제 7-22 번을 푸시오.



package javajungsuk;

abstract class Shape {
	Point p;

	Shape() {
		this(new Point(0, 0));
	}

	Shape(Point p) {
		this.p = p;
	}

	abstract double calcArea(); //도형의 면적을 계산해서 반환하는 메서드

	Point getPosition() {
		return p;
	}

	void setPosition(Point p) {
		this.p = p;
	}
}

class Point {
	int x;
	int y;

	Point() {
		this(0, 0);
	}

	Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public String toString() {
		
		return "[" + x + "," + y + "]";
	}
}

////////////////////////////
class Circle extends Shape{
	private double r;
	public Circle(Point p, double r){
		super(p);
		this.r = r;
	}
	@Override
	double calcArea() {//도형의 면적을 계산해서 반환
		
		return r*r*Math.PI;
	}
	
}

class Rectangle extends Shape{
	 
	private double width, heigh; //멤버변수(전역변수)
	public Rectangle(Point p, double width, double heigh) {
		super(p);
		this.width = width;
		this.heigh = heigh;
		
	}

	
	
	public boolean isSquare() {
		if(width==heigh);
		//0일때도 걸러주기
		return false;
	}



	@Override
	double calcArea() {//도형의 면적을 계산해서 반환
		
		return width*heigh;
	}


}








14.연습문제 7-23 번을 푸시오.

package javajungsuk;

public class ShapeMain2 {
	public static void main(String[] args) {
		Shape[] arr = { new Circle(null, 5.0), 
				new Rectangle(null, 3, 4), 
				new Circle(null, 1) };
				
		System.out.println("면적의 합:" + sumArea(arr));
	}

	private static String sumArea(Shape[] arr) {
	
		double sum =0;
		for(int i = 0; i<arr.length; i++)
				sum += (double)arr[i]+sum;
			
		}
	}
