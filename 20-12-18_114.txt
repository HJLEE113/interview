1.BigInteger 클래스에 대하여 설명하시오.



2.아래의 결과 값은 false 출력이 된다. true 가 되도록 INum을짜시오.

  INum[] ar1 = new INum[3];
      INum[] ar2 = new INum[3];
      ar1[0] = new INum(1); ar2[0] = new INum(1);
      ar1[1] = new INum(2); ar2[1] = new INum(2);
      ar1[2] = new INum(3); ar2[2] = new INum(3);
      System.out.println(Arrays.equals(ar1, ar2));
package java_1218;

import java.util.Arrays;

public class INumClass {

	public static void main(String[] args) {

		INum[] ar1 = new INum[3];
		INum[] ar2 = new INum[3];
		ar1[0] = new INum(1);
		ar2[0] = new INum(1);
		ar1[1] = new INum(2);
		ar2[1] = new INum(2);
		ar1[2] = new INum(3);
		ar2[2] = new INum(3);
		System.out.println(Arrays.equals(ar1, ar2));

	}

}

class INum extends Object {
	private int i;

	public INum(int i) {
		this.i = i;
	}

	public boolean equals(Object o) {//알아서 toString으로 쓰임
  		 if (this.i == ((INum) o).i)//INum으로 형변환
			return true;
		else
			return false;
	}

}
3.아래에서 정렬이 이름순으로 되게끔 하시오. Person 객체를 만드시오.



class ArrayObjSearch {
    public static void main(String[] args) {
        Person[] ar = new Person[3];

        ar[0] = new Person("Lee", 29);
        ar[1] = new Person("Goo", 15);
        ar[2] = new Person("Soo", 37);

        Arrays.sort(ar);
package java_1218;

import java.util.Arrays;

class ArrayObjSearch2 {
	public static void main(String[] args) {
		Person2[] ar = new Person2[3];

		ar[0] = new Person2("Lee", 29);
		ar[1] = new Person2("Goo", 15);
		ar[2] = new Person2("Soo", 37);

		Arrays.sort(ar);

		for (Person2 n : ar) {

			System.out.println(n);
		}
	}
}

class Person2 implements Comparable {
	private String name;
	private int age;

	public Person2(String name, int age) {
		this.name = name;
		this.age = age;
	}

	@Override
	public int compareTo(Object o) {

		Person2 p1 = (Person2) o;
		return this.name.charAt(0) - p1.name.charAt(0);

	}

	public String toString() {
		return name;
	}

}//Goo
//Lee
//Soo


4.위의 문제에서 사람의 이름 글자수가 많은순으로 정렬을 되게 
끔 person 객체를 만드시오.

package java_1218;

import java.util.Arrays;

class ArrayObjSearch2 {
	public static void main(String[] args) {
		Person2[] ar = new Person2[3];

		ar[0] = new Person2("Leee", 29);
		ar[1] = new Person2("Goo", 15);
		ar[2] = new Person2("Soooo", 37);

		Arrays.sort(ar);

		for (Person2 n : ar) {

			System.out.println(n);
		}
	}
}

class Person2 implements Comparable {
	private String name;
	private int age;

	public Person2(String name, int age) {
		this.name = name;
		this.age = age;
	}

	@Override
	public int compareTo(Object o) {

		Person2 p1 = (Person2) o;
		return this.name.length() - p1.name.length();

	}

	public String toString() {
		return name;
	}
}//Goo
//Leee
//Soooo




   
5.경과시간을 맞추는 게임을 작성하라. 다음 예시를 참고하면, <Enter> 키를 입력하면 현재 초 시간을 보여주고 여기서 10초에 더 근접하도록 다음 <Enter> 키를 입력한 사람이 이기는 게임이다. 

10초에 가까운 사람이 이기는 게임입니다. 
황기태 시작 키  >> 
현재 초 시간 = 42 
10초 예상 후 키  >> 
현재 초 시간 = 50 
이재문 시작 키  >> 
현재 초 시간 = 51 
10초 예상 후 키  >> 
현재 초 시간 = 4 
황기태의 결과 8, 이재문의 결과 13, 승자는 황기태





//오류 - String이랑 Date가 타입이 달라 계산이 안되어 결과값도출 실패
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

class ArrayObjSearch2 {
	public static void main(String[] args) {
		Person1 p1 = new Person1();
		Person2 p2 = new Person2();
		Start s1 = new Start();
		Result r1 = new Result();
		Scanner sc = new Scanner(System.in);

		s1.start();
		String output = sc.nextLine();
		p1.time1();
		p2.time2();
		r1.result();

	}

}

class Start {
	void start() {
		SimpleDateFormat second1 = new SimpleDateFormat("ss");
		Date time = new Date();
		String current1 = second1.format(time);
		Scanner sc = new Scanner(System.in);
		System.out.print("황기태 시작 키  >> ");
		String output = sc.nextLine();
		System.out.println("현재 초 시간 = " + current1);
		System.out.print("10초 예상 후 키  >> ");
	}
}

class Person1 {

	void time1() {
		SimpleDateFormat second2 = new SimpleDateFormat("ss");
		Date time = new Date();
		String current2 = second2.format(time);

		System.out.println("현재 초 시간 = " + current2);
		System.out.println("=================");

	}
}

class Person2 {
	void time2() {
		Scanner sc = new Scanner(System.in);
		SimpleDateFormat second3 = new SimpleDateFormat("ss");
		Date time = new Date();
		String current3 = second3.format(time);
		System.out.print("이재문 시작 키  >> ");
		String output = sc.nextLine();
		System.out.println("현재 초 시간 = " + current3);
		System.out.print("10초 예상 후 키  >> ");
		output = sc.nextLine();

	}
}

class Result {
	void result() {
		Scanner sc = new Scanner(System.in);
		SimpleDateFormat second3 = new SimpleDateFormat("ss");
		Date time = new Date();
		String current3 = second3.format(time);
		System.out.println("현재 초 시간 = " + current3);
	}
}




7.제넥릭이란?

프로그래머가 코딩할때 생기는 오류를 최소화 시켜주는 것이다.

Object로 받아서 결과값을 출력할 때 어떤 타입을 넣어주어도 컴파일 오류가 뜨지 않고 결과값이 도출된다.(실시간 에러)

제네릭을 쓰게 되면 Object대신 제네릭타입을 써주기 때문에 잘못된 타입형을 넣어줄땐 오류가 발생한다.

생김새 :  class 이름 옆에<> 꺽쇠생긴것. 전부 object자리에 <T>,T가 들어간다.

object는 참조형타입이기 때문에 T는 참조형타입을 대체할 수 있다.



8. 아래를 프로그래밍 하시오.

Rectangle r1 = new Rectangle(5,6);
Rectangle r2 = new Rectangle(7,9);

Rectangle r3 = Rectangle.compareRect(r1,r2);

System.out.println(r3.getHeight() + " : " + r3.getWidth()  + "입니다.");

=============================
출력 : 9 : 7 입니다.
9. 아래를 프로그래밍 하시오.
 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
-  getSortingRec 사각형 배열을 내림차순 정렬한다.
-정렬이 제대로 되었는지 배열에 저장된 객체의 getArea()함수를 순서대로 호출한다.

Rectangle[] rec = new Rectangle[3];
........
Rectangle[] recSorting = Rectangle.getSortingRec(rec) 
......
