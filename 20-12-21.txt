1.제네릭 클래스의 타입 인자 제한하는 방법과 효과는?
: super 나 extends 예약어를 넣어줘서 해당클래스이거나 상속을 받는(or 하는) 애들로만 제한 할 수 있어 오류를 잡을 수 있다. 



2.아래와 같이 출력값이 나오도록 프로그래밍 하시오.

class DDBoxDemo {
    public static void main(String[] args) {
        DBox<String, Integer> box1 = new DBox<>();
        box1.set("Apple", 25);
 
        DBox<String, Integer> box2 = new DBox<>();
        box2.set("Orange", 33);
        
        DDBox<DBox<String, Integer>, DBox<String, Integer>> ddbox = new DDBox<>();
        ddbox.set(box1, box2);
 
        System.out.println(ddbox);
    }
}
 
==================
Apple & 25
Orange & 33
 
:
 
 
 
class DDBoxDemo {
	public static void main(String[] args) {
		DBox<String, Integer> box1 = new DBox<>();
		box1.set("Apple", 25);
 
		DBox<String, Integer> box2 = new DBox<>();
		box2.set("Orange", 33);
 
		DDBox<DBox<String, Integer>, DBox<String, Integer>> ddbox = new DDBox<>();
		ddbox.set(box1, box2);
 
		System.out.println(ddbox);
	}
}
 
class DDBox<F, A> {
	protected F fruit;
	protected A age;
 
	public void set(F f, A a) {
		fruit = f;
		age = a;
	}
 
	@Override
	public String toString() {
		return fruit + " & " + age + "\n";
 
	}
 
}
 
class DBox<F, A> extends DDBox<F, A> {
	public void set(F f, A a) {
		fruit = f;
		age = a;
	}
 
	public F getFruit() {
		return fruit;
	}
 
	public void setFruit(F fruit) {
		this.fruit = fruit;
	}
 
	public A getAge() {
		return age;
	}
 
	public void setAge(A age) {
		this.age = age;
	}
 
}
//Apple & 25
// & Orange & 33
//오류 &이 한번 더 출력
 

 

 

 

 

3.아래와 같이 출력값이 나오도록 프로그래밍 하시오.

    public static void main(String[] args) {
        Box<Integer> box1 = new Box<>();
        box1.set(99);
 
        Box<Integer> box2 = new Box<>();
        box2.set(55);
 
        System.out.println(box1.get() + " & " + box2.get());
        swapBox(box1, box2);
        System.out.println(box1.get() + " & " + box2.get());
    }
==========
99 & 55
55 & 99
 
:
public class NumMain {
 
	public static void main(String[] args) {
		Box<Integer> box1 = new Box<>();
		box1.set(99);
 
		Box<Integer> box2 = new Box<>();
		box2.set(55);
 
		System.out.println(box1.get() + " & " + box2.get());
		swapBox(box1, box2);
		System.out.println(box1.get() + " & " + box2.get());
	}
 
	private static void swapBox(Box<Integer> box1, Box<Integer> box2) {
 
	}
}
 
class Box<T> {
	private T inte;
 
	public void set(T t) {
		inte = t;
 
	}
 
	public T get() {
 
		return inte;
	}
 
}
//==========
//99 & 55
//55 & 99
 
오류
//99 & 55
99 & 55
 

 

4. 지네릭 메소드에 대하여 설명하시오.
: public static <T> 에서 <T>는 제네릭 메소드 라고 알려주는것이다. (함수앞에 꺽쇠오면 제네릭메소드다)


5. 와일드 카드와 상한 제한, 하한 제한에 대하여 설명하시오. 
 - 상한 제한

ex. public static void PaperBox(Paper<? extends Box> box){ }

위 코드에서 ?는 와일드카드 이므로 어떤 타입이 와도 상관 없다. 근데  extends Box로 예약어를 걸어둠으로서 Box이거나 Box를 상속하는 클래스만 와라 라고 제한을 걸어두었다. (=Box위에 Object는 올 수 없음) = 상한제한

 

- 하한 제한

ex. public static void PaperBox(Paper<? super Box> box){ }

위 코드에서 ?는 와일드카드이므로 box 파라미터 변수에 어떤 타입을 전달 받아도 상관없다. 근데 super Box로 예약어를 걸어두어 Box이거나 Box가 상속하는 클래스만 와라 라고 제한을 걸어두었다. (=Box아래에 있는 Double, Integer, Long 은 올 수 없음) = 하한제한

 

 

6. 아래가 에러가 나는 이유를 설명하시오.

public static void inBox(Box<? super Toy> box, Toy n) {
   box.set(n);   // 넣는 것! OK!
   Toy myToy = box.get();   // 꺼내는 것! Error!
}
super Toy 하한제한 예약어를 줌으로서 box 인스턴스에 넣는 것은 가능하고 box 인스턴스에 꺼내는 것은 불가능
Toy 는 자식클래스인데 box.get();을 해주게 되면 자식클래스에있는 인스턴스를 꺼내게될지 부모클래스에 있는 인스턴스를 꺼내게될지 모르기때문에 에러가 난다.

 

 

 

7. 아래와 같이 메소드 오버로딩이 되지 않는 이유는?
// 다음 두 메소드는 오버로딩 인정 안됨.

   public static void outBox(Box<? extends Toy> box) {...}
   public static void outBox(Box<? extends Robot> box) {...}
 
:
제내릭 안에있는 매개변수 타입에 대해서는 오버로딩이 안된다. - 컴파일 과정에서 내용이 지워지기 때문에
 

오버로딩 시키려면  → , 찍고 매개변수 한개 더 적어주면 된다.

(Box<? super Toy> box, Toy t){ }

(Box<? super Robot> box, Robot r){ }

 

 

 


8. 아래의 결과가 나오도록 프로그래밍을 완성하시오.

 
 public static void main(String[] args) {
        Box<Integer> box1 = new Box<>();
        box1.set(24);
 
        Box<String> box2 = new Box<>();
        box2.set("Poly");
 
        if(compBox(box1, 25))
            System.out.println("상자 안에 25 저장");
 
        if(compBox(box2, "Moly"))
            System.out.println("상자 안에 Moly 저장");
        
        System.out.println(box1.get());
        System.out.println(box2.get());
    }
 
=======
24
Poly
 
:
public class PolyMolyMain {
 
	public static void main(String[] args) {
		Box<Integer> box1 = new Box<>();
		box1.set(24);
 
		Box<String> box2 = new Box<>();
		box2.set("Poly");
 
		if (compBox(box1, 25))
			System.out.println("상자 안에 25 저장");
 
		if (compBox(box2, "Moly"))
			System.out.println("상자 안에 Moly 저장");
 
		System.out.println(box1.get());
		System.out.println(box2.get());
	}
 
	private static boolean compBox(Box<Integer> box1, int i) {
 
		return false;
	}
 
	private static boolean compBox(Box<String> box2, String string) {
 
		return false;
	}
}//24
//Poly
 


9. 콜렉션 프레임워크란?
Set List Queue Map 셀리큐맵!
: 자료구조, 알고리즘을 구현해놓은 일종의 라이브러리이다.
