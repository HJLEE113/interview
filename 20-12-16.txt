오늘의 문제

1.throws 에 대하여 설명하시오.

던져주는것. 

 예)
try { 
md1(); 
} catch (IOException e) { 
e.printStackTrace(); 

} 
} 

public static void md1() throws IOException { 
md2(); 
} 

public static void md2() throws IOException {



설명 :

md2()메소드에서 에러가 나면 md2()를 호출해준 md1()에 예외처리를 던지고 md1은 catch문에 예외처리를 던지고 catch문은 JVM에 예외처리를 던진다.








2.아래가 컴파일 에러가 나는 이유에 대하여 설명하시오.

try {
        	int num = 6 / 0;
        	
        	
		} catch (Exception e) {
			e.printStackTrace();
		} catch (InputMismatchException e) {
			e.printStackTrace();
		}
Exception은 예외처리에서 최고부모인데  다형성(Polymorphism)이 적용되어 부모가 자식보다 위에 쓰이게 되면 예외처리 자식인 InputMismatchException에 도달하지 못하여서 "Unreachable catch block for InputMismatchException." 이라는 경고문이 뜨면서 빨간줄이 그어진다.



3.try with resource 에 대하여 설명하시오.

rescources = 객체. 하나의 메모리

원래는 try-catch문에서 try뒤에 아무것도 쓰지 않는데

try뒤에 가로를 넣어서 객체 생성해주면

굳이 close를 쓰지않아도 try-catch문이 알아서 종료해준다.



4.equals 함수에 대하여 설명하시오.

두 인스턴스를 비교해주는 함수이다.

주소값을 비교하지않고 출력한 String 값을 비교해준다.


5. 과일, 사과, 배, 포도를 표현한 클래스를 만들고 이들 간의 관계를 고려하여 하나의 클래스를 추상 클래스로 만들어 메소드 print()를 구현하고 다음과 같은 소스와 결과가 나오도록 클래스를 작성하시오. 

- 소스 

Fruit fAry[] = {new Grape(), new Apple(), new Pear()); 

for(Fruit f : fAry) 

f.print(); 

-  결과 

나는 포도이다. 
나는 사과이다. 
나는 배이다.





//풀이

package java_1216_;
//과일, 사과, 배, 포도를 표현한 클래스를 만들고 

//이들 간의 관계를 고려하여 하나의 클래스를 
//추상 클래스로 만들어 메소드 print()를 구현하고
//다음과 같은 소스와 결과가 나오도록 클래스를 작성하시오.

//나는 포도이다.
//나는 사과이다.
//나는 배이다.
public class FruitMain {
	public static void main(String[] args) {

		Fruit fAry[] = { new Grape(), new Apple(), new Pear() };

		for (Fruit f : fAry)
			
			f.print();
	}
}

abstract class Fruit {
	Fruit f;
	protected abstract void print();
	

}

class Grape extends Fruit {

	public Grape() {

	}

	@Override
	protected void print() {
		System.out.println("나는 사과이다.");
		
	}

}

class Apple extends Fruit {
	public Apple() {

	}

	@Override
	protected void print() {
		System.out.println("나는 포도이다");
	}
}

class Pear extends Fruit {
	public Pear() {

	}

	@Override
	protected void print() {
		System.out.println("나는 복숭아이다");
	}

}




6. 다음 조건을 만족하도록 클래스 Person과 Student를 작성하시오.
- 클래스 Person
* 필드 : 이름, 나이, 주소 선언
- 클래스 Student
* 필드 : 학교명, 학과, 학번, 8개 평균평점을 저장할 배열로 선언
* 생성자 : 학교명, 학과, 학번 지정
* 메소드 average() : 8개 학기 평균평점의 평균을 반환
- 클레스 Person과 Student 프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다.
이름 : 김다정
나이 : 20

주소 : 서울시 관악구
학교 : 동양서울대학교
학과 : 전산정보학과
학번 : 20132222

----------------------------------------

8학기 학점을 순서대로 입력하세요

1학기 학점  → 3.37
2학기 학점  → 3.89
3학기 학점  → 4.35
4학기 학점  → 3.76
5학기 학점  → 3.89
6학기 학점  → 4.26
7학기 학점  → 4.89
8학기 학점  → 3.89 

----------------------------------------

8학기 총 평균 평점은 4.0375점입니다.





package java_1216_;

import java.util.Scanner;

//- 클레스 Person과 Student 프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다. 
//이름 : 김다정 
//나이 : 20 
//
//주소 : 서울시 관악구 
//학교 : 동양서울대학교 
//학과 : 전산정보학과 
//학번 : 20132222 
//
//---------------------------------------- 
//
//8학기 학점을 순서대로 입력하세요 
//
//1학기 학점  → 3.37 
//2학기 학점  → 3.89 
//3학기 학점  → 4.35 
//4학기 학점  → 3.76 
//5학기 학점  → 3.89 
//6학기 학점  → 4.26 
//7학기 학점  → 4.89 
//8학기 학점  → 3.89  
//
//---------------------------------------- 
//
//8학기 총 평균 평점은 4.0375점입니다. 

class Person {
	protected String name;
	protected int age;
	protected String address;

	public Person(String name, int age, String address) {
		this.name = name;
		this.age = age;
		this.address = address;
	}

	
}

class Student extends Person {
	private String school, depart;
	int id;
	private double Arr[];

	Student(String name, int age, String address, String school, String depart, int id) {
		super(name, age, address);

		this.school = school;
		this.depart = depart;
		this.id = id;

	}

	public void print() {
		System.out.println("이름 : " + name + "\n나이 : " + age + "\n주소 : " + address + "학교는 : " + school + "학과는 : "
				+ depart + "학번은 : " + id);
	}
	
	private static double average(Arr[] num) {

		System.out.println("8학기 학점을 순서대로 입력하세요 ");
		Scanner sc = new Scanner(System.in);
		double scr = sc.nextInt();
		int i;
		int[] num = new int[8];
		for (i = 1; i < num.length + 1; i++) {

			System.out.println(i + "번째 학점>>" + scr);
		}

		double sum = 0;
		for (i = 1; i < num.length + 1; i++)
			sum += num[i];

		System.out.println(num + "학기 총 평균 평점은 " + sum / i + "점입니다.");

	}

}

public class ScoreMain {
	public static void main(String[] args) {
		Student st = new Student("김다정", 20, "서울시 관악구", "동양서울대학교", "전산정보학과", 20132222);

		
		st.average();

	}

}




7.다음은 도형의 구성을 묘사하는 인터페이스이다.



interface Shape {
   final double PI = 3.14; // 상수
   void draw(); // 도형을 그리는 추상 메소드
   double getArea(); // 도형의 면적을 리턴하는 추상 메소드
   default public void redraw() { // 디폴트 메소드
      System.out.print("--- 다시 그립니다.");
      draw();
   }
}
//다음 main() 메소드와 실행 결과를 참고하여,
//인터페이스 Shape을 구현한 클래스 Circle를 작성하고 전체 프로그램을 완성하라.

public static void main(String[] args) {
   Shape donut = new Circle(10); // 반지름이 10인 원 객체
   donut.redraw();
   System.out.println("면적은 "+ donut.getArea());
}




//풀이

package java_1216_;

interface Shape {
	final double PI = 3.14; // 상수

	void draw(); // 도형을 그리는 추상 메소드

	double getArea(); // 도형의 면적을 리턴하는 추상 메소드

	default public void redraw() { // 디폴트 메소드
		System.out.print("--- 다시 그립니다.");
		draw();
	}
}

class Circle implements Shape{
private double i;
	public Circle(double i) {
		this.i = i;
	}

	@Override
	public void draw() {
		
		
	}

	@Override
	public double getArea() {
	
		return i*i*PI;
	}
	
}
// 다음 main() 메소드와 실행 결과를 참고하여,
// 인터페이스 Shape을 구현한 클래스 Circle를 작성하고 전체 프로그램을 완성하라.
public class ShapeMain {
	public static void main(String[] args) {
		Shape donut = new Circle(10); // 반지름이 10인 원 객체
		donut.redraw();
		System.out.println("면적은 " + donut.getArea());
	}

}



8. 
다음 main() 메소드와 실행 결과를 참고하여, 문제 7의 Shape 인터페이스를 구현한 클래스 Oval, Rect를 추가 작성하고 전체 프로그램을 완성하라.

public static void main(String[] args) {
   Shape[] list = new Shape[3]; // Shape을 상속받은 클래스 객체의 레퍼런스 배열
   list[0] = new Circle(10); // 반지름이 10인 원 객체
   list[1] = new Oval(20, 30); // 20x30 사각형에 내접하는 타원
   list[2] = new Rect(10, 40); // 10x40 크기의 사각형
   for(int i=0; i<list.length; i++) list[i].redraw();
   for(int i=0; i<list.length; i++) System.out.println("면적은 "+ list[i].getArea());
}
--- 다시 그립니다.반지름이 10인 원입니다.
--- 다시 그립니다.20x30에 내접하는 타원입니다.
--- 다시 그립니다.10x40크기의 사각형 입니다.
면적은 314.0
면적은 1884.0000000000002
면적은 400.0


//풀이

package java_1216_;

interface Shape {
	final double PI = 3.14; // 상수

	void draw(); // 도형을 그리는 추상 메소드

	double getArea(); // 도형의 면적을 리턴하는 추상 메소드

	default public void redraw() { // 디폴트 메소드
		System.out.print("--- 다시 그립니다.");
		draw();
	}
}

class Circle implements Shape {
	private double i;

	public Circle(double i) {
		this.i = i;
	}

	@Override
	public void draw() { // 도형을 그리는 추상 메소드
		System.out.println("반지름이" + i + "인 원입니다.");

	}

	@Override
	public double getArea() {// 도형의 면적을 리턴하는 추상 메소드

		return i * i * PI;
	}

}

class Oval implements Shape {
	private int i, j;

	public Oval(int i, int j) {
		this.i = i;
		this.j = j;
	}

	@Override
	public void draw() { // 도형을 그리는 추상 메소드
		System.out.println(i + "x" + j + "에 내접하는 타원입니다.");

	}

	@Override
	public double getArea() {// 도형의 면적을 리턴하는 추상 메소드

		return i * j * PI;
	}

}

class Rect implements Shape {
	private int i, j;

	public Rect(int i, int j) {
		this.i = i;
		this.j = j;
	}

	@Override
	public void draw() { // 도형을 그리는 추상 메소드
		System.out.println(i + "x" + j + "크기의 사각형 입니다.");

	}

	@Override
	public double getArea() {// 도형의 면적을 리턴하는 추상 메소드

		return i * j;
	}

}

// 다음 main() 메소드와 실행 결과를 참고하여,
// 인터페이스 Shape을 구현한 클래스 Circle를 작성하고 전체 프로그램을 완성하라.
public class ShapeMain {
	public static void main(String[] args) {
		Shape[] list = new Shape[3]; // Shape을 상속받은 클래스 객체의 레퍼런스 배열
		list[0] = new Circle(10); // 반지름이 10인 원 객체
		list[1] = new Oval(20, 30); // 20x30 사각형에 내접하는 타원
		list[2] = new Rect(10, 40); // 10x40 크기의 사각형
		for (int i = 0; i < list.length; i++)
			list[i].redraw();
		for (int i = 0; i < list.length; i++)
			System.out.println("면적은 " + list[i].getArea());
	}

}
ㄴ
