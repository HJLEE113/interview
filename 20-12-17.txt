1.String 클래스 에서 문자열 비교시 equal을 쓰는 이유는?

String으로 주소값이 아닌 문자열을 비교하고 싶을때 equals를 쓴다.

equals 는 함수오버라이딩해서 자기목적에 맞게끔 만들었기 때문에 문자열이 같으면 true값을 반환한다.


2.shallow copy, deep copy 의 차이는?

shallow copy(얕은 복사)는

원본 참조변수의 참조값만 복사하는 것이다.

deep copy(깊은 복사)는 

원본 참조변수의 참조값이 가르키는 객체를 메모리 공간에 복사생성 후 복사본 참조변수가 가르키는 것이다.




3.금일 배운 Rectangle의 shallow copy 와 deep copy 일때의 그림을 그리시오.(중요)


![shallow deep copy](https://user-images.githubusercontent.com/74958197/102506812-dbc8bc00-40c6-11eb-9523-d4d5d75f6d8f.png)




4.다음 main()이 실행되면 아래 예시와 같이 출력되도록 MyPoint 클래스를 작성하라.

public static void main(String [] args) {
	MyPoint p = new MyPoint(3, 50);
	MyPoint q = new MyPoint(4, 50);
	System.out.println(p);
	if(p.equals(q)) System.out.println("같은 점");
	else System.out.println("다른 점");			
}

Point(3,50)
다른점
package java_1217_;

class MyPoint {
	private int x;
	private int y;

	MyPoint() {

	}

	MyPoint(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public String toString() {
		return "Point(" + x + "," + y + ")";
	}
}

public class PointMain {
	public static void main(String[] args) {
		MyPoint p = new MyPoint(3, 50);
		MyPoint q = new MyPoint(4, 50);
		System.out.println(p);
		if (p.equals(q))
			System.out.println("같은 점");
		else
			System.out.println("다른 점");
	}
}//Point(3,50)
//다른 점




5.중심을 나타내는 정수 x, y와 반지름 radius 필드를 가지는 Circle 클래스를 작성하고자 한다. 생성자는 3개의 인자(x, y, raidus)를 받아 해당 필드를 초기화하고, equals() 메소드는 두 개의 Circle 객체의 중심이 같으면 같은 것으로 판별하도록 한다.

public static void main(String[] args) {
	Circle a = new Circle(2, 3, 5); // 중심 (2, 3)에 반지름 5인 원
	Circle b = new Circle(2, 3, 30); // 중심 (2, 3)에 반지름 30인 원
	System.out.println("원 a : " + a);
	System.out.println("원 b : " + b);
	if(a.equals(b))
		System.out.println("같은 원");
	else 
		System.out.println("서로 다른 원");
}
원 a : Circle(2,3)반지름5 
원 b : Circle(2,3)반지름30 
같은 원 
package java_1217_;

class Circle {
	private int x, y, r;

	Circle(int x, int y, int r) {
		this.x = x;
		this.y = y;
		this.r = r;

	}
	
	public String toString() {
		
		return "Circle("+x+","+y+")반지름"+r;
	}
	
	@Override
	public boolean equals(Object obj) {
		if(this.x==((Circle)obj).x)
			return true;
		else 
			return false;
	}

}

public class PointMain {
	public static void main(String[] args) {
		Circle a = new Circle(2, 3, 5); // 중심 (2, 3)에 반지름 5인 원
		Circle b = new Circle(2, 3, 30); // 중심 (2, 3)에 반지름 30인 원
		System.out.println("원 a : " + a);
		System.out.println("원 b : " + b);
		if (a.equals(b))
			System.out.println("같은 원");
		else
			System.out.println("서로 다른 원");
	}
//		원 a : Circle(2,3)반지름5 
//		원 b : Circle(2,3)반지름30 
//		같은 원 

}

6.문자열을 입력받아 한 글자씩 회전시켜 모두 출력하는 프로그램을 작성하라.(클래스로 작성할 필요없이 메인에서 직접 할것) 

문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다. 
I Love you 
 Love youI 
Love youI  
ove youI L 
ve youI Lo 
e youI Lov 
 youI Love 
youI Love  
ouI Love y 
uI Love yo 
I Love you 
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.



package java_1217;

import java.util.Scanner;

public class LoveMain {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		String str = sc.nextLine();

		char[] arr = str.toCharArray();
		for (int i = 0; i < arr.length; i++) {

			for (int n = 1; n <= arr.length; n++) {
				System.out.print(arr[(i + n) % (arr.length)]);
			}
			System.out.println();
		}
	}
}



7.래퍼 클래스란 무엇인가?

랩으로 감싸는 클래스. 언박싱과 박싱을 할 수 있는 기능이 들어있는 클래스이다.





8.auto unboxing 이란?

기본타입(8개)값을 랩퍼 인스턴스(포장 객체)로 만드는 과정을 박싱이라고 하고 반대로 랩퍼 인스턴스에서 기본타입 값을 얻는 과정은 언박싱이라고 한다.

여기서 기본 자료형 값이 와야 할 위치에 인스턴스가 오면 오토 언박싱이 진행된다.(컴파일러가 찾아서 변환을 다 시켜준다. 문법적으로 허용됨)


9. 다음 조건을 만족하는 클래스 Person을 구현하여 테스트하는 프로그램을 작성하시오.(필수) 

- 클래스 Person은 이름을 저장하는 필드 구성 

- 클래스 Person은 상위 클래스 Object의 메소드 equals()를 오버라이딩하여 이름이 같으면 true를 반환하는 메소드 구현 

- 다음과 같은 소스로 클래스 Person을 점검

Person p1 = new Person("홍길동");
System.out.println(p1.equals(new Person("홍길동")));
System.out.println(p1.equals(new Person("최명태")));
package java_1217_;

class Person {
	private String name;

	public Person(String name) {
		this.name = name;
	}

	@Override
	public boolean equals(Object obj) {
		if (this.name == ((Person) obj).name)
			return true;
		else
			return false;
	}
}

public class PersonMain {
	public static void main(String[] args) {
		Person p1 = new Person("홍길동");
		System.out.println(p1.equals(new Person("홍길동")));
		System.out.println(p1.equals(new Person("최명태")));
	}

}










10. 다음 조건을 만족하는 클래스 String의 객체 이용 프로그램을 작성하여 메소드 equals()와 연산자 ==의 차이를 비교 설명하시오.(필수)  

- 메소드 equals()와 비교 연산자 ==의 차이를 다음 소스로 점검

String s1 = new String("java");
String s2 = new String("java");
String s3 = s2;

 

System.out.println(s1 == s2);
System.out.println(s1.equals(s2));
System.out.println(s2 == s3);
System.out.println(s2.equals(s3));


class Stringequals {

	public Stringequals(String name) {

	}
}

public class PersonMain {
	public static void main(String[] args) {
		String s1 = new String("java");
		String s2 = new String("java");
		String s3 = s2;

		System.out.println(s1 == s2); // s1과 s2의 주소값을 비교
		System.out.println(s1.equals(s2));// s1와 s2의 문자열값을 비교-다형성적용
		System.out.println(s2 == s3);// s1과 s2의 주소값을 비교
		System.out.println(s2.equals(s3)); //s2와 s3의 문자열값을 비교
	}

}








11. 다음 조건을 만족하도록 오늘의 정보를 출력하는 프로그램을 작성하시오. 

- 클래스 Calendar의 객체의 다음 메소드를 사용하며 

 * get(Calendar.DAY_OF_WEEK_IN_MONTH) : 달에서 요일의 횟수 반환 
 * get(Calendar.DAY_OF_WEEK) : 요일을 반환, 1이 일요일 
 * get(Calendar.WEEK_OF_MONTH) : 월의 주 횟수를 반환 
 * get(Calendar.DAY_OF_YEAR) : 해의 날짜를 반환 
 * get(Calendar.WEEK_OF_YEAR) : 해의 주 횟수를 반환 

- 다음과 같이 출력되도록 한다. 

오늘은 2012년 6월 17일 일요일입니다. 
이 달의 3번째 일요일입니다. 
이 달의 4번째 주입니다. 
이 해의 169일입니다. 
이 해의 25번째 주입니다. 
